{"version":3,"file":"kidd-utils.es.js","sources":["../libs/array.ts","../libs/core.ts","../libs/is.ts","../libs/storage.ts"],"sourcesContent":["/*\r\n * 数组相关处理方法\r\n * author: zhijie\r\n */\r\nimport { PrimitiveType } from \"../types/index\";\r\n\r\n/*\r\n * 数组去重(仅能判断基本类型)\r\n */\r\nexport const uniqueArray = (arr: PrimitiveType[] = []): PrimitiveType[] => {\r\n  const res: PrimitiveType[] = [];\r\n  if (!Array.isArray(arr) || !arr || !arr.length) return res;\r\n  const map = new Map(); // 记录已有数据\r\n  arr.forEach(item => {\r\n    if (!map.has(item)) {\r\n      res.push(item);\r\n      map.set(item, true);\r\n    }\r\n  });\r\n  return res;\r\n};\r\n\r\n/*\r\n * 获取数组第一个数据，没有数据则返回默认值\r\n * @arr:需要处理的数组 @defaultVal:默认值\r\n */\r\nexport const getFirst = (arr: unknown[] = [], defaultVal?: unknown): unknown => {\r\n  let res: unknown = defaultVal ?? \"\";\r\n  if (arr?.length) {\r\n    res = arr[0];\r\n  }\r\n  return res;\r\n};\r\n\r\n/*\r\n * 获取数组最后一个数据，没有数据则返回默认值\r\n * @arr:需要处理的数组 @defaultVal:默认值\r\n */\r\nexport const getLast = (arr: unknown[] = [], defaultVal?: unknown): unknown => {\r\n  let res: unknown = defaultVal ?? \"\";\r\n  if (arr?.length) {\r\n    res = arr[arr.length - 1];\r\n  }\r\n  return res;\r\n};\r\n","/*\r\n * 常用的工具类函数\r\n * author: zhijie\r\n */\r\nimport { Options } from \"../types/index\";\r\n\r\n/*\r\n * 转换成Option类型数组\r\n */\r\nexport const transToOptions = <T>(arr: T[], labelField: string, valueField: string): Options[] => {\r\n  if (!arr || !arr.length) return [];\r\n  return (\r\n    arr.map(item => {\r\n      return { label: item[labelField] ?? \"\", value: item[valueField] ?? \"\" };\r\n    }) ?? []\r\n  );\r\n};\r\n\r\n/*\r\n * 对象重置\r\n * @targetObj: 需要操作的对象 @defaultValMap：重置默认值\r\n */\r\nexport const handleReset = (targetObj: Record<string, unknown>, defaultValMap?: Record<string, unknown>) => {\r\n  const keys: string[] = Object.keys(targetObj); // 获取目标对象所有的key\r\n  keys.forEach(key => {\r\n    const tempData: unknown = targetObj[key];\r\n    targetObj[key] =\r\n      defaultValMap && defaultValMap[key]\r\n        ? defaultValMap[key]\r\n        : Array.isArray(tempData)\r\n          ? []\r\n          : typeof tempData === \"string\"\r\n            ? \"\"\r\n            : typeof tempData === \"number\"\r\n              ? 0\r\n              : typeof tempData === \"boolean\"\r\n                ? false\r\n                : \"\";\r\n  });\r\n};\r\n","/*\r\n * 类型判断\r\n * author: zhijie\r\n */\r\n\r\n/*\r\n * 判断是否数字类型\r\n */\r\nexport const isNumber = (val: unknown): boolean => {\r\n  return typeof val === \"number\" || Object.prototype.toString.call(val) === \"[object Number]\";\r\n};\r\n\r\n/*\r\n * 判断是否字符串类型\r\n */\r\nexport const isString = (val: unknown): boolean => {\r\n  return typeof val === \"string\" || Object.prototype.toString.call(val) === \"[object String]\";\r\n};\r\n\r\n/*\r\n * 是否不为空\r\n */\r\nexport const isNotEmpty = (val: unknown): boolean => {\r\n  if (!val && val !== 0) return false; // null/undefined/0/false/''\r\n  if (Array.isArray(val) && !val.length) return false; // 空数组\r\n  if (Object.prototype.toString.call(val) === \"[object Object]\" && !Object.keys(val).length) return false; // 不是空对象\r\n  return true;\r\n};\r\n\r\n/*\r\n * 是否电话号码\r\n */\r\nexport const isMobile = (val: string | number): boolean => {\r\n  if (!val || (typeof val !== \"string\" && typeof val !== \"number\")) return false;\r\n  const regExp: RegExp = /^1[3-9]\\d{9}$/;\r\n  return regExp.test(val as string);\r\n};\r\n\r\n/*\r\n * 是否固定电话\r\n */\r\nexport const isFixedPhone = (val: string | number): boolean => {\r\n  if (!val || (typeof val !== \"string\" && typeof val !== \"number\")) return false;\r\n  const regExp = /^(\\d{3,4}[- ]?)?\\d{7,8}$/;\r\n  return regExp.test(val as string);\r\n};\r\n\r\n/*\r\n * 是否正整数\r\n */\r\nexport const isPositiveInteger = (val: string | number): boolean => {\r\n  const num = Number(val); // 将输入转换为数字\r\n  return !isNaN(num) && num > 0 && num % 1 === 0;\r\n};\r\n\r\n/*\r\n * 是否身份证号码\r\n */\r\nexport const isIdCardNo = (val: string): boolean => {\r\n  // 校验\r\n  if (!val || val.length !== 18) return false; // 校验位数\r\n  // 校验是否为全数字\r\n  if (!/^\\d{18}$/.test(val)) {\r\n    return false;\r\n  }\r\n  const checkCode: string = \"10X98765432\"; // 校验码\r\n  // 提取前17位数字\r\n  const baseId: string = val.slice(0, 17);\r\n\r\n  // 校验出生年月日\r\n  const year: string = baseId.slice(6, 4);\r\n  const month: string = baseId.slice(10, 2);\r\n  const day: string = baseId.slice(12, 2);\r\n  if (!/^\\d{4}(0[1-9]|1[0-2])(0[1-9]|[12][0-9]|3[01])$/.test(year + month + day)) {\r\n    return false;\r\n  }\r\n  // 计算校验码\r\n  let sum: number = 0;\r\n  for (let i = 0; i < 17; i++) {\r\n    sum += parseInt(baseId.charAt(i), 10) * (i % 2 === 0 ? 1 : 3);\r\n  }\r\n  // 计算模\r\n  const mod: number = sum % 11;\r\n  // 校验最后一位\r\n  return checkCode.charAt(mod) === val.charAt(17).toUpperCase();\r\n};\r\n\r\n/*\r\n * 特殊符号校验\r\n */\r\nexport const isEmoji = (val: string): boolean => {\r\n  const emojiRegex =\r\n    /[\\u{1F600}-\\u{1F64F}\\u{1F300}-\\u{1F5FF}\\u{1F680}-\\u{1F6FF}\\u{1F1E0}-\\u{1F1FF}\\u{2600}-\\u{26FF}\\u{2700}-\\u{27BF}\\u{1F900}-\\u{1F9FF}\\u{1F910}-\\u{1F96B}\\u{1F980}-\\u{1F991}]/u;\r\n  return emojiRegex.test(val);\r\n};\r\n","/*\r\n * 浏览器storage相关\r\n */\r\n\r\n/*\r\n * 将内容设置到storage中\r\n * key: 键名 value: 值 storageName:存储区域\r\n * @return 是否操作成功\r\n */\r\nexport const setStorageItem = (\r\n  key: string,\r\n  value: unknown,\r\n  storageName: \"localStorage\" | \"sessionStorage\" = \"localStorage\"\r\n): boolean => {\r\n  if (!window[storageName]) return false;\r\n  window[storageName].setItem(key, JSON.stringify(value));\r\n  return true;\r\n};\r\n\r\n/*\r\n * 将内容设置到storage中(带过期时间)\r\n * key: 键名 value: 值 storageName:存储区域 expireTime\r\n * @return 是否操作成功\r\n */\r\nexport const setExpireStorageItem = (\r\n  key: string,\r\n  value: unknown,\r\n  storageName: \"localStorage\" | \"sessionStorage\" = \"localStorage\",\r\n  expireTime?: number\r\n): boolean => {\r\n  if (!window[storageName]) return false;\r\n  const temp: Record<string, unknown> = {\r\n    value: value, // 存储的值\r\n    expireTime: expireTime ? new Date().getTime() + expireTime : null // 过期时间\r\n  };\r\n  window[storageName].setItem(key, JSON.stringify(temp));\r\n  return true;\r\n};\r\n\r\n/*\r\n * 从storage中取值\r\n * key: 键名 storageName:存储区域\r\n * @return 对应的值或null\r\n */\r\nexport const getStorageItem = <T>(key: string, storageName: \"localStorage\" | \"sessionStorage\" = \"localStorage\"): T | null => {\r\n  if (!window[storageName]) return null;\r\n  const value = window[storageName].getItem(key);\r\n  if (value && value != \"undefined\" && value != \"null\") {\r\n    return <T>JSON.parse(value);\r\n  }\r\n  return null;\r\n};\r\n\r\n/*\r\n * 从storage中取值\r\n * key: 键名 storageName:存储区域\r\n * @return 对应的值或null\r\n */\r\nexport const getExpireStorageItem = <T>(\r\n  key: string,\r\n  storageName: \"localStorage\" | \"sessionStorage\" = \"localStorage\"\r\n): T | null => {\r\n  if (!window[storageName]) return null;\r\n  const value: string | null = window[storageName].getItem(key);\r\n  if (value) {\r\n    const storageData: any = JSON.parse(value); // 反序列化数据\r\n    if (!storageData.expireTime || new Date().getTime() < storageData.expireTime) {\r\n      // 如果没有过期或者还没有过期\r\n      return storageData.value; // 返回存储的值\r\n    } else {\r\n      window[storageName].removeItem(key); // 如果已经过期，则删除该项\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\n/*\r\n * 从storage中移除对应的值\r\n * key: 键名 storageName:存储区域\r\n * @return 是否操作成功\r\n */\r\nexport const removeStorageItem = (key: string, storageName: \"localStorage\" | \"sessionStorage\" = \"localStorage\"): boolean => {\r\n  if (!window[storageName] || !window[storageName].getItem(key)) return false;\r\n  window[storageName].removeItem(key);\r\n  return true;\r\n};\r\n\r\n/*\r\n * 从storage中移除对应的值\r\n * storageName:存储区域 如果不传storageName默认所有storage清除\r\n */\r\nexport const clearStorage = (storageName?: \"localStorage\" | \"sessionStorage\") => {\r\n  if (!storageName) {\r\n    window.localStorage.clear();\r\n    window.sessionStorage.clear();\r\n  } else {\r\n    window[storageName].clear();\r\n  }\r\n};\r\n"],"names":["uniqueArray","arr","res","map","item","getFirst","defaultVal","getLast","transToOptions","labelField","valueField","handleReset","targetObj","defaultValMap","key","tempData","isNumber","val","isString","isNotEmpty","isMobile","isFixedPhone","isPositiveInteger","num","isIdCardNo","checkCode","baseId","year","month","day","sum","i","mod","isEmoji","setStorageItem","value","storageName","setExpireStorageItem","expireTime","temp","getStorageItem","getExpireStorageItem","storageData","removeStorageItem","clearStorage"],"mappings":"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"}